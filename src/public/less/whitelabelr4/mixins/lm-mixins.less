//Mixins for both themes

/* shared functions */

.cf() {
    &:after {
        content: " ";
        display: table;
        clear: both;
    }
}

.iconMixin(@char: ">", @size: inherit, @color: inherit) {
    content: @char;
    font-size: @size;
    color: @color;
    font-family: 'icomoon', serif !important;
    speak: none;
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    /* Better Font Rendering =========== */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

// Placeholder text
.placeholder(@color: @input-color-placeholder) {
    // Firefox
    &::-moz-placeholder {
        color: @color;
        opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
    }
    &:-ms-input-placeholder {
        color: @color;
    } // Internet Explorer 10+
    &::-webkit-input-placeholder {
        color: @color;
    } // Safari and Chrome
}

.getFontFace (@name, @path, @weight: normal, @style: normal) {
    font-family: @name;
    src: url('@{path}.eot');
    src: url('@{path}.eot?#iefix') format('embedded-opentype'),
    url('@{path}.woff') format('woff'),
    url('@{path}.ttf') format('truetype'),
    url('@{path}.svg') format('svg');
    font-weight: @weight;
    font-style: @style;
}

.hoverStates(@props,
@state: false) {
    .no-touchevents &:hover,
    &:active {
        @props();
    }
    &.@{state} when not(@state=false) {
        @props();
    }
}

.buttonHoverStates(@props) {
    .hoverStates(@props,
    is_selected);
}

.headers(@props,
@selector: ~"") {
    h1@{selector},
    h2@{selector},
    h3@{selector},
    h4@{selector},
    h5@{selector} {
        @props();
    }
}

.arrowButton(@direction: null) {
    border: none;
    border-radius: 0;
    background: rgba(0, 0, 0, 0.5);
    position: absolute;
    display: block;
    bottom: 0;
    width: 40px;
    height: 40px;
    min-height: 40px;
    line-height: 40px;
    margin: 0;
    padding: 0;
    font-size: 0;
    text-align: center;
    z-index: 1;
    color: @white;
    &:before {
        content: "";
        background: none;
        display: inline-block;
        border-style: solid;
        border-width: 1px 1px 0 0;
        position: relative;
        top: 0;
        height: 15px;
        width: 15px;
        transform: rotate(-45deg);
        vertical-align: middle;
    }
    & when (@direction =right) {
        right: 0;
        &:before {
            right: 3px;
            transform: rotate(45deg);
        }
    }
    & when (@direction =left) {
        right: 41px;
        &:before {
            left: 3px;
            transform: rotate(-135deg);
        }
    }
    .hoverStates( {
        background: rgba(0, 0, 0, 0.7);
        outline: none;
    }
    );
}

.arrowLink(@direction: null) {
    .FontDefault();
    display: inline-block;
    height: @breadcrumb-height;
    line-height: @breadcrumb-height;
    padding: 0 15px;
    font-size: @breadcrumb-fontSize;
    text-decoration: none;
    @media (@tabletAndUp) {
        padding: 0 12px;
    }
    @media (@tabletLandscapeAndUp) {
        height: @breadcrumb-height_tabletLandscape;
        line-height: @breadcrumb-height_tabletLandscape;
        font-size: @breadcrumb-fontSize_tabletLandscape;
    }
    @media (@desktopAndUp) {
        padding: 0 10px;
    }
    & when (@direction =left) {
        &:before {
            .iconMixin(@char: @icon_chevron_left,
            @size: 10px);
            margin-right: 8px;
            @media (@tabletAndUp) {
                margin-right: 12px;
            }
            @media (@desktopAndUp) {
                margin-right: 10px;
            }
        }
    }
    & when (@direction =right) {
        &:after {
            .iconMixin(@char: @icon_chevron_right,
            @size: 10px);
            margin-left: 8px;
            @media (@tabletAndUp) {
                margin-left: 12px;
            }
            @media (@desktopAndUp) {
                margin-left: 10px;
            }
        }
    }
}

.inputErrorMixin() {
    border: 1px solid @errorRed;
    background: @errorBg;
}

.inputFocus() {
    outline: 1px dotted;
    outline: -webkit-focus-ring-color auto 5px;
    outline-offset: -1px;
}

.textInputMixin() {
    .FontDefault();
    border-radius: @border-radius-base;
    border: 1px solid @border;
    background-color: @white;
    display: inline-block;
    width: 100%;
    line-height: @textInput-lineHeight;
    padding: @textInput-paddingY 14px;
    font-size: 16px;
    color: @defaultText;
    vertical-align: middle;
    &:focus {
        .inputFocus();
    }
    &.is_error {
        .inputErrorMixin;
    }
    &:placeholder-shown {
        background-color: #fcfcfc;
    }
    &.placeholder-shown {
        background-color: #fcfcfc;
    }
    &.is_small {
        padding: @textInput_small-paddingY 10px;
    }
}

.checkboxGroup(@name) {
    // Fix for Safari column count hidding everything
    -webkit-transform: translateX(0);
    transform: translateX(0);
    .formField__@{name} {
        break-inside: avoid-column;
        page-break-inside: avoid;
        -webkit-column-break-inside: avoid;
        padding-bottom: 0;
    }
    .@{name}Wrap {
        position: relative;
        display: flex;
        align-items: center;
        cursor: pointer;
        margin-bottom: 0;
        padding-bottom: 1px; // to stop IE cutting off checkboxes
        input {
            position: absolute;
            opacity: 0;
            z-index: -1;
        }
        input:focus+.cbre_@{name} {
            outline: none;
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px fade(#007eff, 40%);
        }
        .formLabel {
            display: inline-block;
            color: @defaultText;
            margin-bottom: 0;
        }
        .cbre_@{name} {
            border: 1px solid @grey;
            background: @white;
            display: inline-block;
            margin-right: 11px;
            text-align: center;
            flex-shrink: 0;
        }
    }
}

.navItemStyle() {
    font-weight: @headerNav-fontWeight;
    letter-spacing: @uppercase-letterSpacing;
}

// Select mixins
.SelectOptionPaddingMixin( @paddingX: 16px,
@paddingY: 8px) {
    .Select-option,
    .Select-noresults {
        padding-top: @paddingY;
        padding-bottom: @paddingY;
        &:first-child {
            padding-top: (@paddingY + 1px);
        }
        &:last-child {
            padding-bottom: (@paddingY + 1px);
        }
    }
    .Select-option.is-selected:after {
        right: @paddingX;
    }
    .Select-option,
    .Select-noresults,
    .Select-menu-outer .formLabel {
        padding-left: @paddingX;
        padding-right: @paddingX;
    }
    &.Select--multi .Select-option.is-selected {
        padding-right: (@paddingX + 20px);
    }
}

.SelectFontsizeMixin( @fontsize: 1em,
@optionFontsize: null,
@optionGroupTitleFontsize: null) {
    .Select-value,
    &.has-value.Select--single>.Select-control .Select-value .Select-value-label,
    &.has-value.is-pseudo-focused.Select--single>.Select-control .Select-value .Select-value-label,
    .Select-input input,
    .Select-placeholder {
        font-size: 12;
    }
    & when (@optionFontsize =null) {
        .Select-option,
        .Select-noresults {
            font-size: 12;
        }
    }
    & when not(@optionFontsize =null) {
        .Select-option,
        .Select-noresults {
            font-size: 12;
        }
    }
    & when not(@optionGroupTitleFontsize =null) {
        .Select-option.Select-option__groupTitle {
            font-size: @optionGroupTitleFontsize;
        }
    }
}

.SelectOptionColorMixin( @color: @accentColor,
@hoverColor: @white,
@bg: @white,
@alternatingBg: null,
@hoverBg: @accentColor,
@selectedBg: null,
@selectedColor: null,
@highlightColor: @accentColor) {
    .Select-option {
        border-top: 1px solid transparent;
        background: @bg;
        color: @color;
        & when not(@alternatingBg =null) {
            &:nth-child(2n) {
                background: @alternatingBg;
            }
        }
        &.Select-option__groupTitle {
            color: lighten(@color, 15%);
        }
        &.is-selected {
            background: tint(@hoverBg, 80%);
            color: @color;
            & when not(@selectedBg =null) {
                +.is-selected,
                +.is-focused {
                    border-top-color: lighten(@selectedBg, 15%);
                }
                background: @selectedBg;
            }
            & when not(@selectedColor =null) {
                color: @selectedColor;
            }
        }
        &.is-focused {
            background: @hoverBg;
            color: @hoverColor;
            & when not(@selectedBg =null) {
                +.is-selected {
                    border-top-color: lighten(@selectedBg, 15%);
                }
                background: @selectedBg;
            }
        }
        &.is-focused.is-disabled {
            background: @bg;
            color: @color;
            &.Select-option__groupTitle {
                color: lighten(@color, 15%);
            }
        }
        .highlight {
            color: @highlightColor;
        }
        &.is-focused .highlight,
        &.is-selected .highlight {
            color: @hoverColor;
        }
        & when not(@selectedColor =null) {
            &.is-selected .highlight {
                color: @selectedColor;
            }
        }
    }
}

.SelectColorMixin( @color: @lightGreen,
@hoverColor: @lightGreen,
@placeholderColor: null,
@placeholderHoverColor: null) {
    .colorHelper(@props,
    @prefixSelector: ~"",
    @selector: ~"",
    @hoverSelector: ~"") {
        @{prefixSelector} &.Select--multi@{selector} .Select-control@{hoverSelector} .Select-value,
        @{prefixSelector} &.Select--single@{selector}>.Select-control@{hoverSelector} .Select-value,
        @{prefixSelector} &.Select--single.has-value@{selector}>.Select-control@{hoverSelector} .Select-value .Select-value-label,
        @{prefixSelector} &.has-value.is-pseudo-focused.Select--single@{selector}>.Select-control@{hoverSelector} .Select-value .Select-value-label,
        @{prefixSelector} &@{selector} .Select-control@{hoverSelector} .Select-input input,
        @{prefixSelector} &@{selector} .Select-control@{hoverSelector} .Select-placeholder {
            @props();
        }
    }
    .colorHelper( {
        color: @color;
    }
    );
    .colorHelper( {
        color: @hoverColor;
    }
    ,
    @prefixSelector: ~".no-touchevents",
    @hoverSelector: ~":hover");
    .colorHelper( {
        color: @color;
    }
    ,
    @prefixSelector: ~".no-touchevents",
    @selector: ~".is-disabled",
    @hoverSelector: ~":hover");
    & when not(@placeholderColor =null) {
        .Select-control .Select-placeholder {
            color: @placeholderColor;
        }
    }
    & when not(@placeholderHoverColor =null) {
        .no-touchevents &:hover .Select-control .Select-placeholder,
        &.is-open .Select-control .Select-placeholder {
            color: @placeholderHoverColor;
        }
    }
}

.SelectPaddingMixin( @paddingX: 16px,
@paddingY: 0px,
@iconPadding: 24px) {
    .Select-control {
        padding-left: @paddingX;
        padding-top: @paddingY;
        padding-bottom: @paddingY;
    }
    &.cbre_icon .Select-control {
        padding-left: (@paddingX + @iconPadding);
    }
    &.has_overflow:not(.is-open) .Select-multi-value-wrapper,
    &.cbre_icon:before {
        left: @paddingX;
    }
    &.cbre_icon.has_overflow:not(.is-open) .Select-multi-value-wrapper {
        left: (@paddingX + @iconPadding);
    }
    .Select-arrow {
        margin: 0 @paddingX;
    }
}